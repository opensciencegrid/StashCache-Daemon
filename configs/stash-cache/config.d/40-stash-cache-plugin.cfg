#
# Configure XRootD Caching Proxy (`XCache`) for OSG deploys.
#
# **********************************************************************
# * WARNING: DO NOT EDIT THIS FILE.  IT WILL BE OVERWRITTEN ON UPGRADE *
# **********************************************************************
#
# This file is part of the XCache Daemon

# Load the correct libraries for XCache to operate:
# First, the proxy library itself.
if exec xrootd
   # Only Xrootd should be using osslib not cmsd
   ofs.osslib  libXrdPss.so
   # Second, the cache underlying the proxy.
   pss.cachelib libXrdPfc.so
fi

# This is need so the redir does not have to think too much
# the next request whichone to assign it to
if exec cmsd
   cms.space 0
fi

if named atlas-xcache
   # Allows the client to set the origin
   # http://xrootd.org/doc/dev49/pss_config.htm#
   pss.origin =

   # Load the Rucio namespace-mapping plugin
   pss.namelib -lfncache /usr/lib64/XrdName2NameDCP4RUCIO.so
else if named cms-xcache
   pss.origin cmsxrootd.fnal.gov:1094

   xrd.network keepalive kaparms 10m,1m,5
   xrd.timeout idle 60m
else
   pss.origin redirector.osgstorage.org:1094

   # Tune the client timeouts to more aggressively timeout.
   pss.setopt ParallelEvtLoop 10
   pss.setopt RequestTimeout 25
   pss.setopt ConnectTimeout 25
   pss.setopt ConnectionRetry 2
fi

# Cache plugin parameters
#
# The default values here should be sufficient for most use cases. To change them, override them
# by setting the XC_BLOCKSIZE, XC_PREFETCH, XC_RAMSIZE, XC_SPACE_LOW_WM, XC_SPACE_HIGH_WM
# environment variables for the XRootD processes

if defined ?~XC_BLOCKSIZE
   set eBLOCKSIZE=$XC_BLOCKSIZE
else
   set eBLOCKSIZE=512k
fi

if defined ?~XC_PREFETCH
   set ePREFETCH=$XC_PREFETCH
else
   set ePREFETCH=10
fi

if defined ?~XC_RAMSIZE
   set eRAMSIZE=$XC_RAMSIZE
else
   set eRAMSIZE=1g
fi

if defined ?~XC_SPACE_LOW_WM
   set eSPACELOWWM=$XC_SPACE_LOW_WM
else
   set eSPACELOWWM=0.90
fi

if defined ?~XC_SPACE_HIGH_WM
   set eSPACEHIGHWM=$XC_SPACE_HIGH_WM
else
   set eSPACEHIGHWM=0.95
fi

if defined ?~WQ_BLOCKS_PER_LOOP
   set eWQBLOCKS=$WQ_BLOCKS_PER_LOOP
else
   set eWQBLOCKS=10
fi

if defined ?~WQ_THREADS
   set eWQTHREADS=$WQ_THREADS
else
   set eWQTHREADS=2
fi



# The size of the blocks in cache; all reads to the data federation
# will be rounded along these boundaries.
pfc.blocksize $eBLOCKSIZE
# Amount of memory to use for blocks in flight; this is NOT a RAM cache,
# just a temporary buffer.
# 1GB is 200 files concurrently downloaded with 10 prefetch blocks.
pfc.ram $eRAMSIZE
# Number of blocks to prefetch from a file at once.
pfc.prefetch $ePREFETCH
# The low-water and high-water marks for the disk usage; once disk usage
# goes above the high-water mark, the cache deletes until it hits the low-water
# mark.
pfc.diskusage $eSPACELOWWM $eSPACEHIGHWM
# A number of blocks to write in parallel and number of writing threads
# For spinning disks more is better up to the number of spindles in your system
# For NVMe' it is not so critical.
pfc.writequeue $eWQBLOCKS $eWQTHREADS
